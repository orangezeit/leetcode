struct StaticUnion {
    vector<int> parents, ranks;
    StaticUnion(int n) : parents(n), ranks(n) {
        iota(parents.begin(), parents.end(), 0);
    }

    int find(const int& x) {
        if (x != parents[x])
            parents[x] = find(parents[x]);
        return parents[x];
    }

    void unite(const int& x, const int& y) {
        int px(find(x)), py(find(y));
        if (px == py) return;
        ranks[px] >= ranks[py] ? parents[py] = px : parents[px] = py;
        if (ranks[px] == ranks[py]) ranks[px]++;
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n(graph.size());

        auto group = [&](const int& r) {
            StaticUnion uf(n);
            for (int i = 0; i < n; ++i)
                for (int j = i + 1; j < n; ++j) {
                    if (i == r || j == r) continue;
                    if (graph[i][j])
                        uf.unite(i, j);
                }
            unordered_map<int, int> cnts;
            unordered_set<int> heads;
            for (int i = 0; i < n; ++i)
                cnts[uf.find(i)]++;
            for (const int& i: initial)
                heads.insert(uf.parents[i]);
            int ans(0);
            for (const int& h: heads)
                ans += cnts[h];
            return ans;
        };

        int num(initial[0]);
        int s = INT_MAX;

        for (const int& i: initial) {
            int temp = group(i);
            if (temp < s || temp == s && num > i) {
                s = temp;
                num = i;
            }
        }
        return num;
    }
};
