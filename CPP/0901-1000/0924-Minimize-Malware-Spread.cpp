struct StaticUnion {
    vector<int> parents, ranks;
    StaticUnion(int n) : parents(n), ranks(n) {
        iota(parents.begin(), parents.end(), 0);
    }

    int find(const int& x) {
        if (x != parents[x])
            parents[x] = find(parents[x]);
        return parents[x];
    }

    void unite(const int& x, const int& y) {
        int px(find(x)), py(find(y));
        if (px == py) return;
        ranks[px] >= ranks[py] ? parents[py] = px : parents[px] = py;
        if (ranks[px] == ranks[py]) ranks[px]++;
    }
};

class Solution {
public:
    // 51/52 passed, could have bugs
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n(graph.size());
        StaticUnion uf(n);

        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (graph[i][j])
                    uf.unite(i, j);

        vector<int> cnts(n), ones(n);
        for (int i = 0; i < n; ++i) cnts[uf.find(i)]++;
        for (const int& i: initial) {
            ans = min(ans, i);
            ones[uf.parents[i]]++;
        }

        for (const int& i: initial) {
            if (ones[uf.parents[i]] > 1) continue;
            int temp = cnts[uf.parents[i]];
            if  (temp > s || temp == s && ans > i) {
                s = temp;
                ans = i;
            }
        }
        return ans;
    }
};
